library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
BTC <- getSymbols("BTC-USD", src = "yahoo", from = "2013-01-01", to = "2020-11-01", auto.assign = FALSE)
Op(BTC)
#dailyReturn(spy)
plot(dailyReturn(BTC))
plot(weeklyReturn(BTC))
ts(weeklyReturn(BTC))
ts=ts(weeklyReturn(BTC))
ts
auto.arima(ts)
library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
BTC <- getSymbols("BTC-USD", src = "yahoo", from = "2013-01-01", to = "2020-11-01", auto.assign = FALSE)
Op(BTC)
Hi(BTC)
Lo(BTC)
Cl(BTC)
Vo(BTC)
Ad(BTC)
plot(dailyReturn(BTC))
plot(weeklyReturn(BTC))
ts=ts(weeklyReturn(BTC))
auto.arima(ts)
logts=log10(ts)
auto.arima(logts)
train_data %>% mutate(type = "train") %>%
bind_rows(test_data %>% mutate(type = "test"))
train_data <- training(initial_time_split(ts, prop = .8))
test_data <- testing(initial_time_split(ts, prop = .8))
install.packages("modeltime")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("lubridate")
install.packages("timetk")
library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
library(tidymodels)
library(modeltime)
library(timetk)
library(lubridate)
BTC <- getSymbols("BTC-USD", src = "yahoo", from = "2013-01-01", to = "2020-11-01", auto.assign = FALSE)
Op(BTC)
Hi(BTC)
Lo(BTC)
Cl(BTC)
Vo(BTC)
Ad(BTC)
plot(dailyReturn(BTC))
plot(weeklyReturn(BTC))
ts=ts(weeklyReturn(BTC))
auto.arima(ts)
logts=log10(ts)
auto.arima(logts)
train_data <- training(initial_time_split(ts, prop = .8))
test_data <- testing(initial_time_split(ts, prop = .8))
library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
library(tidymodels)
library(modeltime)
library(timetk)
library(lubridate)
install.packages("tidymodels")
library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
library(tidymodels)
library(modeltime)
library(timetk)
library(lubridate)
BTC <- getSymbols("BTC-USD", src = "yahoo", from = "2013-01-01", to = "2020-11-01", auto.assign = FALSE)
Op(BTC)
Hi(BTC)
Lo(BTC)
Cl(BTC)
Vo(BTC)
Ad(BTC)
plot(dailyReturn(BTC))
plot(weeklyReturn(BTC))
ts=ts(weeklyReturn(BTC))
auto.arima(ts)
logts=log10(ts)
auto.arima(logts)
train_data <- training(initial_time_split(ts, prop = .8))
test_data <- testing(initial_time_split(ts, prop = .8))
train_data %>% mutate(type = "train") %>%
bind_rows(test_data %>% mutate(type = "test"))
View(train_data)
View(test_data)
library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
library(tidymodels)
library(modeltime)
library(timetk)
library(lubridate)
BTC <- getSymbols("BTC-USD", src = "yahoo", from = "2013-01-01", to = "2020-11-01", auto.assign = FALSE)
Op(BTC)
Hi(BTC)
Lo(BTC)
Cl(BTC)
Vo(BTC)
plot(dailyReturn(BTC))
plot(weeklyReturn(BTC))
ts=ts(weeklyReturn(BTC))
auto.arima(ts)
weeklyReturn(BTC)
ts=as.data.frame(weeklyReturn(BTC))
View(ts)
ts$date=row.names(ts)
View(ts)
row.names(ts)
as.Date.character(row.names(ts))
as.Date.character(row.names(ts))
as.Date.character(row.names(ts))
ts$date=as.Date.character(row.names(ts))
ts$date=as.Date.default (row.names(ts))
ts$date=as.Date (row.names(ts))
auto.arima(ts$weekly.returns)
logts=log10(ts$weekly.returns)
auto.arima(logts)
train_data <- training(initial_time_split(ts, prop = .8))
test_data <- testing(initial_time_split(ts, prop = .8))
View(test_data)
train_data %>% mutate(type = "train") %>%
bind_rows(test_data %>% mutate(type = "test")) %>%
ggplot(aes(x = date, y =weekly.returns, color = type)) +
geom_line()
arima_model <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(daily_change~date, data = train_data)
arima_model <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(weekly.returns~date, data = train_data)
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
fit(weekly.returns~date, data = train_data)
tslm_model <- linear_reg() %>%
set_engine("lm") %>%
fit(weekly.returns~as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
arima_boosted_model <- arima_boost(learn_rate = .015, min_n = 2) %>%
set_engine("auto_arima_xgboost") %>%
fit(weekly.returns~date + as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
#https://github.com/andrew-couch/Tidy-Tuesday/blob/master/TidyTuesdayForecasting.Rmd
#https://github.com/andrew-couch/Tidy-Tuesday/blob/master/TidyTuesdayTidyForecast.Rmd
library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
library(tidymodels)
library(modeltime)
library(timetk)
library(lubridate)
BTC <- getSymbols("BTC-USD", src = "yahoo", from = "2013-01-01", to = "2020-11-01", auto.assign = FALSE)
Op(BTC)
Hi(BTC)
Lo(BTC)
Cl(BTC)
Vo(BTC)
Ad(BTC)
plot(dailyReturn(BTC))
plot(weeklyReturn(BTC))
ts=as.data.frame(weeklyReturn(BTC))
ts$date=as.Date (row.names(ts))
auto.arima(ts$weekly.returns)
logts=log10(ts$weekly.returns)
auto.arima(logts)
train_data <- training(initial_time_split(ts, prop = .8))
test_data <- testing(initial_time_split(ts, prop = .8))
train_data %>% mutate(type = "train") %>%
bind_rows(test_data %>% mutate(type = "test")) %>%
ggplot(aes(x = date, y =weekly.returns, color = type)) +
geom_line()
arima_model <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(weekly.returns~date, data = train_data)
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
fit(weekly.returns~date, data = train_data)
tslm_model <- linear_reg() %>%
set_engine("lm") %>%
fit(weekly.returns~as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
arima_boosted_model <- arima_boost(learn_rate = .015, min_n = 2) %>%
set_engine("auto_arima_xgboost") %>%
fit(weekly.returns~date + as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
View(forecast_table)
forecast_table %>%
modeltime_calibrate(test_data) %>%
modeltime_accuracy()
forecast_table %>%
modeltime_calibrate(test_data) %>%
modeltime_forecast(actual_data = test_data) %>%
plot_modeltime_forecast()
forecast_table %>%
modeltime_refit(df) %>%
modeltime_forecast(h = 7, actual_data = df) %>%
plot_modeltime_forecast()
library(PerformanceAnalytics)
library(quantmod)
library(tidyverse)
library(modeldata)
library(forecast)
library(tidymodels)
library(modeltime)
library(timetk)
library(lubridate)
BTC <- getSymbols("BTC-USD", src = "yahoo", from = "2013-01-01", to = "2020-11-01", auto.assign = FALSE)
Op(BTC)
Hi(BTC)
Lo(BTC)
Cl(BTC)
Vo(BTC)
Ad(BTC)
plot(dailyReturn(BTC))
plot(weeklyReturn(BTC))
ts=as.data.frame(weeklyReturn(BTC))
ts$date=as.Date (row.names(ts))
train_data <- training(initial_time_split(ts, prop = .8))
test_data <- testing(initial_time_split(ts, prop = .8))
train_data %>% mutate(type = "train") %>%
bind_rows(test_data %>% mutate(type = "test")) %>%
ggplot(aes(x = date, y =weekly.returns, color = type)) +
geom_line()
arima_model <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(weekly.returns~date, data = train_data)
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
fit(weekly.returns~date, data = train_data)
tslm_model <- linear_reg() %>%
set_engine("lm") %>%
fit(weekly.returns~as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
arima_boosted_model <- arima_boost(learn_rate = .015, min_n = 2) %>%
set_engine("auto_arima_xgboost") %>%
fit(weekly.returns~date + as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
forecast_table %>%
modeltime_calibrate(test_data) %>%
modeltime_accuracy()
ts=as.data.frame(dailyReturn(BTC))
ts$date=as.Date (row.names(ts))
train_data <- training(initial_time_split(ts, prop = .8))
test_data <- testing(initial_time_split(ts, prop = .8))
train_data %>% mutate(type = "train") %>%
bind_rows(test_data %>% mutate(type = "test")) %>%
ggplot(aes(x = date, y =weekly.returns, color = type)) +
geom_line()
ts
train_data %>% mutate(type = "train") %>%
bind_rows(test_data %>% mutate(type = "test")) %>%
ggplot(aes(x = date, y =daily.returns, color = type)) +
geom_line()
arima_model <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(weekly.returns~date, data = train_data)
arima_model <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(daily.returns~date, data = train_data)
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
fit(weekly.returns~date, data = train_data)
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
fit(daily.returns~date, data = train_data)
tslm_model <- linear_reg() %>%
set_engine("lm") %>%
fit(daily.returns~as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
arima_boosted_model <- arima_boost(learn_rate = .015, min_n = 2) %>%
set_engine("auto_arima_xgboost") %>%
fit(daily.returns~date + as.numeric(date) + factor(month(date, label = TRUE)), data = train_data)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model,
arima_boosted_model
)
forecast_table %>%
modeltime_calibrate(test_data) %>%
modeltime_accuracy()
forecast_table %>%
modeltime_calibrate(test_data) %>%
modeltime_forecast(actual_data = test_data) %>%
plot_modeltime_forecast()
forecast_table <- modeltime_table(
arima_model,
prophet_model,
tslm_model
#,arima_boosted_model
)
forecast_table %>%
modeltime_calibrate(test_data) %>%
modeltime_accuracy()
forecast_table %>%
modeltime_calibrate(test_data) %>%
modeltime_forecast(actual_data = test_data) %>%
plot_modeltime_forecast()
forecast_table %>%
modeltime_refit(df) %>%
modeltime_forecast(h = 7, actual_data = df) %>%
plot_modeltime_forecast()
